#!/bin/bash

# List of Pokémon to fetch
pokemon_list=("bulbasaur" "ivysaur" "venusaur" "charmander" "charmeleon")

# Directory to store Pokémon data
data_dir="pokemon_data"
log_file="pokemon_errors.log"

# Create directory if it doesn't exist
mkdir -p "$data_dir"
# Clear previous log file
> "$log_file"

# Function to fetch and save Pokémon data with retries
fetch_pokemon() {
    local pokemon_name="$1"
    local url="https://pokeapi.co/api/v2/pokemon/${pokemon_name}"
    local output_file="${data_dir}/${pokemon_name}.json"
    local max_retries=3
    local attempt=1
    local success=0

    echo "Fetching data for ${pokemon_name}..."

    while [ $attempt -le $max_retries ]; do
        if curl -s --fail "$url" | jq '.' > "$output_file" 2>/dev/null; then
            echo "Saved data to ${output_file} ✅"
            success=1
            break
        else
            echo "Attempt $attempt failed for ${pokemon_name} ❌"
            [ -f "$output_file" ] && rm "$output_file"
            ((attempt++))
            sleep 2
        fi
    done

    if [ $success -eq 0 ]; then
        echo "❗ Error: Failed to fetch data for ${pokemon_name} after ${max_retries} attempts." | tee -a "$log_file"
    fi
}

# Launch background jobs and store their PIDs
pids=()

for pokemon in "${pokemon_list[@]}"; do
    fetch_pokemon "$pokemon" &
    pids+=($!)
done

# Show background jobs
echo "🔍 Currently running jobs:"
jobs

# Wait for all background jobs to complete
for pid in "${pids[@]}"; do
    wait "$pid" || echo "⚠️ Process $pid exited with error"
done

# Kill any remaining background processes (cleanup if necessary)
for job in $(jobs -p); do
    kill "$job" 2>/dev/null
done

echo "✅ All background fetches completed."